input {
	file {
		path => "/home/ajenson/Desktop/logstash/test.log"
		start_position => "beginning"
		sincedb_path => "/dev/null"
	}
}

filter {
	grok {
		match => { "message" => "<[0-9]{2}>[0-9]\s%{TIMESTAMP_ISO8601:event_date}\s%{HOSTNAME:firewall_device}\s%{WORD:process}\s%{NUMBER:process_number}\s-\s-\s%{GREEDYDATA:remaining}" }
	}
	kv {
		source => "remaining"
		value_split => "="
		field_split => "^M "
	}
	# renaming field names as per the requirements
	mutate {
		rename => { "alertname" => "description" }
		rename => { "computerip" => "source_ip" }
		rename => { "computername" => "hostname" }
		rename => { "severity" => "severity_level" }
	}
	# chaning datatype of fields as per required
	mutate {
		convert => { "severity_level" => "integer" }
		convert => { "process_number" => "integer" }
		convert => { "source_ip" => "string" }
	}
	# source_ip field had extra \" so replacing it with empty
	mutate {
		gsub => ["[source_ip]","\"",""]
	}
	# test case for severity_level and severity
	# severity_level 1 = High
	# severity_level 2 = Critical
	# other severity_levels = Unknown
	if [severity_level] == 1 {
		mutate {
			add_field => { "severity" => "High" }
		}
	}
	else if [severity_level] == 2 {
		mutate {
			add_field => { "severity" => "Critical" }
		}
	}
	else {
		mutate {
			add_field => { "severity" => "Unknown" }
		}
	}
	prune {
		blacklist_names => ["remaining","message","path"]
	}
}
	
output {
	stdout { }
	file {
		codec => json
		path => "/home/ajenson/Desktop/logstash/output.json"
	}
}
